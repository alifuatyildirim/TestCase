// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Wallet.Api.Integration.Test.Tests.Wallet.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateWalletTransactionCommandFeature : object, Xunit.IClassFixture<CreateWalletTransactionCommandFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateWalletTransactionCommand.feature"
#line hidden
        
        public CreateWalletTransactionCommandFeature(CreateWalletTransactionCommandFeature.FixtureData fixtureData, Wallet_Api_Integration_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/Wallet/Features", "CreateWalletTransactionCommand", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Wallet Transaction for a WalletId with POST Request.Then http status shoul" +
            "d be OK")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateWalletTransactionCommand")]
        [Xunit.TraitAttribute("Description", "Create Wallet Transaction for a WalletId with POST Request.Then http status shoul" +
            "d be OK")]
        public virtual void CreateWalletTransactionForAWalletIdWithPOSTRequest_ThenHttpStatusShouldBeOK()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Wallet Transaction for a WalletId with POST Request.Then http status shoul" +
                    "d be OK", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "CurrencyCode",
                            "Limit",
                            "CreatedDate"});
                table4.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "11111111-1111-1111-1111-111111111111",
                            "TRY",
                            "250",
                            "2024-01-13"});
#line 4
        testRunner.Given("Wallets are", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "WalletId",
                            "CurrencyCode",
                            "Amount",
                            "TransactionType",
                            "CreatedBy"});
                table5.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "TRY",
                            "100",
                            "Deposit",
                            "11111111-1111-1111-1111-111111111111"});
                table5.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "TRY",
                            "200",
                            "Deposit",
                            "11111111-1111-1111-1111-111111111111"});
                table5.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "TRY",
                            "50",
                            "WithDraw",
                            "11111111-1111-1111-1111-111111111111"});
#line 7
        testRunner.Given("Wallet Transactions are", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "CurrencyCode",
                            "Amount",
                            "TransactionType",
                            "CreatedBy"});
                table6.AddRow(new string[] {
                            "TRY",
                            "100",
                            "Deposit",
                            "11111111-1111-1111-1111-111111111111"});
#line 12
        testRunner.When("POST \"/walletTransaction/create/99999999-9999-9999-9999-999999999990\" is called w" +
                        "ith parameters", ((string)(null)), table6, "When ");
#line hidden
#line 15
        testRunner.Then("Http status code should be 200 and Message should be \"\" and error code should be " +
                        "\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CurrencyCode",
                            "Limit"});
                table7.AddRow(new string[] {
                            "11111111-1111-1111-1111-111111111111",
                            "TRY",
                            "350"});
#line 16
        testRunner.Then("Wallet By User should be for user 11111111-1111-1111-1111-111111111111", ((string)(null)), table7, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "WalletId",
                            "Amount",
                            "TransactionType",
                            "CreatedBy"});
                table8.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "100",
                            "Deposit",
                            "11111111-1111-1111-1111-111111111111"});
                table8.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "200",
                            "Deposit",
                            "11111111-1111-1111-1111-111111111111"});
                table8.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "50",
                            "WithDraw",
                            "11111111-1111-1111-1111-111111111111"});
                table8.AddRow(new string[] {
                            "99999999-9999-9999-9999-999999999990",
                            "100",
                            "Deposit",
                            "11111111-1111-1111-1111-111111111111"});
#line 19
        testRunner.Then("Wallet Transaction should be for wallet 99999999-9999-9999-9999-999999999990", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateWalletTransactionCommandFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateWalletTransactionCommandFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
